{"version":3,"sources":["bll/bodyGame-reducer.ts","ui/BodyGame/BodyGame.tsx","ui/Navbar/Navbar.tsx","ui/App.tsx","reportWebVitals.ts","bll/navbar-reducer.ts","bll/store.ts","index.tsx","ui/App.module.css"],"names":["GET_NEXT_QUESTION","initialState","totalScore","i","questionBlock","active","questions","text","score","answers","isRight","bodyGameReducer","state","action","type","BodyGame","useSelector","bodyGame","dispatch","useDispatch","onAnswerOptionClick","e","target","dataset","answer","console","log","onClick","data-answer","String","Navbar","App","props","className","s","app","app_header","app_main","nav","body_game","app_footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","navbarReducer","rootReducer","combineReducers","navbar","store","createStore","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.d6820b53.chunk.js","sourcesContent":["import {Dispatch} from \"react\";\n\nconst GET_NEXT_QUESTION = 'millionaire/bodyGame/GET_NETX_QUESTION';\n\ntype ActonType = any\ntype initialStateType = typeof initialState\n\nlet initialState = {\n    totalScore: 0,\n    i: 0,\n    questionBlock: {\n        active: true,\n\n        questions: [\n            {\n                text: \"Вопрос №1\",\n                score: 1000,\n                answers: [\n                    {\n                        text: \"Вариант №1\",\n                        isRight: true\n                    },\n                    {\n                        text: \"Вариант №2\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №3\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №4\",\n                        isRight: false\n                    },\n                ]\n            },\n            {\n                text: \"Вопрос №2\",\n                score: 5000,\n                answers: [\n                    {\n                        text: \"Вариант №1\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №2\",\n                        isRight: true\n                    },\n                    {\n                        text: \"Вариант №3\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №4\",\n                        isRight: false\n                    },\n                ]\n            },\n            {\n                text: \"Вопрос №3\",\n                score: 10000,\n                answers: [\n                    {\n                        text: \"Вариант №1\",\n                        isRight: true\n                    },\n                    {\n                        text: \"Вариант №2\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №3\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №4\",\n                        isRight: false\n                    },\n                ]\n            },\n        ]\n    }\n};\n\nconst bodyGameReducer = (state = initialState, action: ActonType): initialStateType => {\n    switch (action.type) {\n\n        case GET_NEXT_QUESTION:\n            return {\n                ...state,\n                i: state.i + 1,\n                totalScore: state.totalScore += 2000\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport const getNextQuestionAC = () => {\n    console.log(\"Hi\")\n    return {type: GET_NEXT_QUESTION}\n};\n\nexport const getAuthUserData = () => async (dispatch: Dispatch<ActonType>) => {\n    /*dispatch(setAuthUserData());*/\n}\n\nexport default bodyGameReducer;\n\n\n","import {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../bll/store\";\nimport {AnswersType, QuestionsType, QuestionType, StateType, VariantType} from \"../../bll/state\";\nimport {getNextQuestionAC} from \"../../bll/bodyGame-reducer\";\nimport {useEffect} from \"react\";\n\nexport const BodyGame = () => {\n\n    const questions = useSelector<AppStateType, QuestionsType>((state) => state.bodyGame.questionBlock.questions)\n    /*\n        const answers = useSelector<QuestionsType, AnswersType>((state) => state.map(m => m))\n    */\n    const questionsText = useSelector<AppStateType, QuestionsType>((state) => state.bodyGame.questionBlock.questions)\n    const i = useSelector<AppStateType, number>((state) => state.bodyGame.i)\n    const dispatch = useDispatch()\n\n    let onAnswerOptionClick = (e: any) => {\n        if (e.target.dataset.answer === 'true') {\n            dispatch(getNextQuestionAC())\n        }\n    }\n\n    return (\n        <div>\n            <div>{\n                questions[i].text\n            }</div>\n            <div onClick={(e) => onAnswerOptionClick(e)}>\n                <button data-answer={String(questions[i].answers[0].isRight)}>Вариант 1</button>\n                <button data-answer={questions[i].answers[1].isRight}>Вариант 2</button>\n                <button data-answer={questions[i].answers[2].isRight}>Вариант 3</button>\n                <button data-answer={questions[i].answers[3].isRight}>Вариант 4</button>\n            </div>\n        </div>\n    )\n}\n","export const Navbar = () => {\n    return (\n        <div>\n            navbar\n        </div>\n    )\n}","import React from 'react';\nimport s from './App.module.css';\nimport {BodyGame} from \"./BodyGame/BodyGame\";\nimport {Navbar} from \"./Navbar/Navbar\";\n\n\n\nconst App: React.FC = (props) => {\n  return (\n    <div className={s.app}>\n\n      <header className={s.app_header}>\n          Кто хочет стать миллионером?\n      </header>\n\n      <main className={s.app_main}>\n          <div className={s.nav}>\n              <Navbar/>\n          </div>\n          <div className={s.body_game}>\n              <BodyGame/>\n          </div>\n      </main>\n\n      <footer className={s.app_footer}>\n          Контакты\n      </footer>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from \"react\";\n\nconst GET_CAPTCHA_URL_SUCCESS = 'millionaire/Navbar/';\n\ntype ActonType = any\ntype initialStateType = typeof initialState\n\nlet initialState = {\n    totalScore: 0\n};\n\nconst navbarReducer = (state = initialState, action: ActonType): initialStateType => {\n    switch (action.type) {\n\n       /* case GET_CAPTCHA_URL_SUCCESS: {\n            return {}\n        }*/\n\n        default:\n            return state;\n    }\n}\n\nexport const setAuthUserData = () => ({});\n\nexport const getAuthUserData = () => async (dispatch: Dispatch<ActonType>) => {\n    dispatch(setAuthUserData());\n}\n\nexport default navbarReducer;","import { Store, createStore, combineReducers } from \"redux\";\nimport bodyGameReducer from \"./bodyGame-reducer\";\nimport navbarReducer from \"./navbar-reducer\";\n\n\n\nlet rootReducer = combineReducers({\n    bodyGame: bodyGameReducer,\n    navbar: navbarReducer\n});\n\n\nexport type RootReducerType = typeof rootReducer\n\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type StoreType = Store<AppStateType>\n\n\n//@ts-ignore\n\nexport let store: StoreType = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2CsLU\",\"app_header\":\"App_app_header__1c6Ak\",\"app_main\":\"App_app_main__2WMHL\",\"nav\":\"App_nav__1GqYr\",\"body_game\":\"App_body_game__39Hsp\",\"app_footer\":\"App_app_footer__2sBSk\",\"App-logo-spin\":\"App_App-logo-spin__14T80\"};"],"sourceRoot":""}