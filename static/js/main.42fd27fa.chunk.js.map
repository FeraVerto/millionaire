{"version":3,"sources":["ui/Navbar/Navbar.module.css","bll/bodyGame-reducer.ts","ui/BodyGame/ButtonWithAnswer/ButtonWithAnswer.tsx","ui/BodyGame/BodyGame.tsx","ui/Navbar/Navbar.tsx","ui/StartGame/StartGame.tsx","ui/GameOver/GameOver.tsx","ui/App.tsx","reportWebVitals.ts","bll/navbar-reducer.ts","bll/store.ts","index.tsx","ui/App.module.css"],"names":["module","exports","GET_NEXT_QUESTION","RESET_SCORE","TOGGLE_IS_ACTIVE","initialState","totalScore","i","questionBlock","isActive","questions","text","score","answers","isRight","bodyGameReducer","state","action","type","ButtonWithAnswer","data-answer","BodyGame","useSelector","bodyGame","dispatch","useDispatch","onAnswerOptionClick","e","target","dataset","answer","onClick","map","a","Navbar","className","s","rating","StartGame","to","GameOver","App","props","app","app_header","app_main","nav","body_game","exact","path","component","app_footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","navbarReducer","rootReducer","combineReducers","navbar","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42fd27fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rating\":\"Navbar_rating__3MbzN\",\"active\":\"Navbar_active__2B-b3\"};","import {Dispatch} from \"react\";\n\nconst GET_NEXT_QUESTION = 'millionaire/bodyGame/GET_NETX_QUESTION';\nconst RESET_SCORE = 'millionaire/bodyGame/RESET_SCORE';\nconst TOGGLE_IS_ACTIVE = 'millionaire/bodyGame/TOGGLE_IS_ACTIVE';\n\ntype ActonType = any\ntype initialStateType = typeof initialState\n\nlet initialState = {\n    totalScore: 0,\n    i: 0,\n    questionBlock: {\n        isActive: true,\n        questions: [\n            {\n                text: \"Вопрос №1\",\n                score: 1000,\n                answers: [\n                    {\n                        text: \"Вариант №1\",\n                        isRight: true\n                    },\n                    {\n                        text: \"Вариант №2\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №3\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №4\",\n                        isRight: false\n                    },\n                ]\n            },\n            {\n                text: \"Вопрос №2\",\n                score: 5000,\n                answers: [\n                    {\n                        text: \"Вариант №21\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №22\",\n                        isRight: true\n                    },\n                    {\n                        text: \"Вариант №23\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №24\",\n                        isRight: false\n                    },\n                ]\n            },\n            {\n                text: \"Вопрос №3\",\n                score: 10000,\n                answers: [\n                    {\n                        text: \"Вариант №31\",\n                        isRight: true\n                    },\n                    {\n                        text: \"Вариант №32\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №33\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №34\",\n                        isRight: false\n                    },\n                ]\n            },\n            {\n                text: \"Вопрос №4\",\n                score: 10000,\n                answers: [\n                    {\n                        text: \"Вариант №41\",\n                        isRight: true\n                    },\n                    {\n                        text: \"Вариант №42\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №43\",\n                        isRight: false\n                    },\n                    {\n                        text: \"Вариант №44\",\n                        isRight: false\n                    },\n                ]\n            },\n        ]\n    }\n};\n\nconst bodyGameReducer = (state = initialState, action: ActonType): initialStateType => {\n    switch (action.type) {\n\n        case GET_NEXT_QUESTION:\n            return {\n                ...state,\n                i: state.i + 1,\n                totalScore: state.totalScore += state.questionBlock.questions[state.i].score\n            }\n\n        case RESET_SCORE:\n            return {\n                ...state,\n                i: 0,\n                totalScore: 0,\n                questionBlock: {\n                    ...state.questionBlock,\n                    isActive: false\n                }\n            }\n\n        case TOGGLE_IS_ACTIVE:\n            return {\n                ...state,\n                questionBlock: {\n                    ...state.questionBlock,\n                    isActive: true\n                }\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport const getNextQuestionAC = () => ({type: GET_NEXT_QUESTION});\n\nexport const resetScoreAC = () => ({type: RESET_SCORE});\n\nexport const toggleIsActiveAC = () => ({type: TOGGLE_IS_ACTIVE})\n\n/*export const getAuthUserData = () => async (dispatch: Dispatch<ActonType>) => {\n    /!*dispatch(setAuthUserData());*!/\n}*/\n\nexport default bodyGameReducer;\n\n\n","type ButtonType = {\n    isRight: boolean | string,\n    text: string\n}\n\nexport const ButtonWithAnswer = ({isRight, text}: ButtonType) => {\n    return (\n        <button data-answer={isRight}>{text}</button>\n    )\n}","import {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../bll/store\";\nimport {QuestionsType} from \"../../bll/state\";\nimport {getNextQuestionAC, resetScoreAC} from \"../../bll/bodyGame-reducer\";\nimport {ButtonWithAnswer} from \"./ButtonWithAnswer/ButtonWithAnswer\";\n\nexport const BodyGame = () => {\n\n    const questions = useSelector<AppStateType, QuestionsType>((state) => state.bodyGame.questionBlock.questions)\n    const i = useSelector<AppStateType, number>((state) => state.bodyGame.i)\n    const dispatch = useDispatch()\n\n    let onAnswerOptionClick = (e: any) => {\n        if (e.target.dataset.answer === 'true') {\n            dispatch(getNextQuestionAC())\n        } else {\n            dispatch(resetScoreAC())\n        }\n    }\n\n    return (\n        <div>\n            <div>\n                {\n                    questions[i].text\n                }\n            </div>\n            <div onClick={(e) => onAnswerOptionClick(e)}>\n                {\n                    questions[i].answers.map(a => <ButtonWithAnswer isRight={a.isRight} text={a.text}/>)\n                }\n            </div>\n        </div>\n    )\n}\n","import {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../bll/store\";\nimport s from './Navbar.module.css'\n\nexport const Navbar = () => {\n\n    let totalScore = useSelector<AppStateType, number>(state => state.bodyGame.totalScore)\n\n    return (\n        <div className={s.rating}>\n            {totalScore}\n            <span>3000000</span>\n            <span>1500000</span>\n            <span>800000</span>\n            <span>400000</span>\n            <span>200000</span>\n            <span>100000</span>\n            <span>50000</span>\n            <span>25000</span>\n            <span>15000</span>\n            <span>10000</span>\n            <span>5000</span>\n            <span>3000</span>\n            <span>2000</span>\n            <span>1000</span>\n            <span>500</span>\n        </div>\n    )\n}","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\ntype StartGameType = {\n\n}\n\nexport const StartGame = () => {\n    return (\n        <div>\n            <NavLink to='/game'>Начнем игру</NavLink>\n        </div>\n    )\n}\n","import {NavLink} from \"react-router-dom\";\nimport React from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {toggleIsActiveAC} from \"../../bll/bodyGame-reducer\";\n\nexport const GameOver = () => {\n\n    const dispatch = useDispatch()\n\n    const onLinkClick = () => {\n        dispatch(toggleIsActiveAC())\n    }\n\n    return (\n        <div>\n            Game over\n            <div onClick={onLinkClick}>Продул, неудачник!</div>\n        </div>\n    )\n}","import React from 'react';\nimport {NavLink, Route} from 'react-router-dom';\nimport s from './App.module.css';\nimport {BodyGame} from \"./BodyGame/BodyGame\";\nimport {Navbar} from \"./Navbar/Navbar\";\nimport {StartGame} from \"./StartGame/StartGame\";\nimport {GameOver} from \"./GameOver/GameOver\";\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../bll/store\";\n\n\nconst App: React.FC = (props) => {\n\n    let isActive = useSelector<AppStateType, boolean>(state => state.bodyGame.questionBlock.isActive)\n\n    return (\n        <div className={s.app}>\n\n            <header className={s.app_header}>\n                Кто хочет стать react-разработчиком?\n            </header>\n\n            <main className={s.app_main}>\n                <div className={s.nav}>\n                    <Navbar/>\n                </div>\n                <div className={s.body_game}>\n                    <Route exact path=\"/\" component={() => <StartGame/>}/>\n                </div>\n                {\n                    !isActive\n                        ? <div className={s.body_game}>\n                            <GameOver/>\n                        </div>\n                        : <div className={s.body_game}>\n                            <Route path=\"/game\" component={() => <BodyGame/>}/>\n                        </div>\n                }\n            </main>\n\n            <footer className={s.app_footer}>\n                Контакты\n            </footer>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from \"react\";\n\nconst GET_CAPTCHA_URL_SUCCESS = 'millionaire/Navbar/';\n\ntype ActonType = any\ntype initialStateType = typeof initialState\n\nlet initialState = {\n    totalScore: 0\n};\n\nconst navbarReducer = (state = initialState, action: ActonType): initialStateType => {\n    switch (action.type) {\n\n       /* case GET_CAPTCHA_URL_SUCCESS: {\n            return {}\n        }*/\n\n        default:\n            return state;\n    }\n}\n\nexport const setAuthUserData = () => ({});\n\nexport const getAuthUserData = () => async (dispatch: Dispatch<ActonType>) => {\n    dispatch(setAuthUserData());\n}\n\nexport default navbarReducer;","import { Store, createStore, combineReducers } from \"redux\";\nimport bodyGameReducer from \"./bodyGame-reducer\";\nimport navbarReducer from \"./navbar-reducer\";\n\n\n\nlet rootReducer = combineReducers({\n    bodyGame: bodyGameReducer,\n    navbar: navbarReducer\n});\n\n\nexport type RootReducerType = typeof rootReducer\n\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type StoreType = Store<AppStateType>\n\n\n//@ts-ignore\n\nexport let store: StoreType = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2CsLU\",\"app_header\":\"App_app_header__1c6Ak\",\"app_main\":\"App_app_main__2WMHL\",\"nav\":\"App_nav__1GqYr\",\"body_game\":\"App_body_game__39Hsp\",\"app_footer\":\"App_app_footer__2sBSk\",\"App-logo-spin\":\"App_App-logo-spin__14T80\"};"],"sourceRoot":""}